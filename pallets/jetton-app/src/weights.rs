//! Autogenerated weights for erc20_app
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spec.json"), DB CACHE: 128

// Executed Command:
// target/release/snowbridge
// benchmark
// --chain
// spec.json
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// erc20_app
// --extra
// --extrinsic
// *
// --repeat
// 20
// --steps
// 50
// --output
// pallets/erc20-app/src/weights.rs
// --template
// module-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for evm_fungible_app.
pub trait WeightInfo {
	fn burn() -> Weight;
	fn mint() -> Weight;
	fn register_sidechain_asset() -> Weight;
	fn register_existing_sidechain_asset() -> Weight;
	fn register_thischain_asset() -> Weight;
	fn register_fungible_app() -> Weight;
	fn register_native_app() -> Weight;
	fn register_existing_native_app() -> Weight;
	fn register_asset_internal() -> Weight;
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn burn() -> Weight {
		Weight::zero()
	}
	fn mint() -> Weight {
		Weight::zero()
	}

	fn register_existing_sidechain_asset() -> Weight {
		Default::default()
	}

	fn register_fungible_app() -> Weight {
		Default::default()
	}

	fn register_sidechain_asset() -> Weight {
		Default::default()
	}

	fn register_thischain_asset() -> Weight {
		Default::default()
	}

	fn register_native_app() -> Weight {
		Default::default()
    }

	fn register_existing_native_app() -> Weight {
		Default::default()
    }

	fn register_asset_internal() -> Weight {
		Default::default()
    }
}
