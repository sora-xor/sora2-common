// This file is part of the SORA network and Polkaswap app.

// Copyright (c) 2020, 2021, Polka Biome Ltd. All rights reserved.
// SPDX-License-Identifier: BSD-4-Clause

// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:

// Redistributions of source code must retain the above copyright notice, this list
// of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this
// list of conditions and the following disclaimer in the documentation and/or other
// materials provided with the distribution.
//
// All advertising materials mentioning features or use of this software must display
// the following acknowledgement: This product includes software developed by Polka Biome
// Ltd., SORA, and Polkaswap.
//
// Neither the name of the Polka Biome Ltd. nor the names of its contributors may be used
// to endorse or promote products derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY Polka Biome Ltd. AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Polka Biome Ltd. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//! Autogenerated weights for substrate_bridge_channel::outbound
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `TRX40`, CPU: `AMD Ryzen Threadripper 3960X 24-Core Processor`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// ./target/release/framenode
// benchmark
// pallet
// --chain=local
// --steps=50
// --repeat=20
// --pallet=substrate_bridge_channel::outbound
// --extrinsic=*
// --header=./misc/file_header.txt
// --template=./misc/pallet-weight-template.hbs
// --output=./outbound-channel.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for substrate_bridge_channel::outbound.
pub trait WeightInfo {
	fn on_initialize(m: u32, p: u32, ) -> Weight;
	fn on_initialize_non_interval() -> Weight;
	fn on_initialize_no_messages() -> Weight;
	fn submit() -> Weight;
}

/// Weights for substrate_bridge_channel::outbound using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: SubstrateBridgeOutboundChannel Interval (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel Interval (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:2 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	/// Storage: BridgeProxy Senders (r:20 w:0)
	/// Proof Skipped: BridgeProxy Senders (max_values: None, max_size: None, mode: Measured)
	/// Storage: LeafProvider LatestDigest (r:1 w:1)
	/// Proof Skipped: LeafProvider LatestDigest (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[1, 20]`.
	/// The range of component `p` is `[0, 256]`.
	fn on_initialize(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (259 ±0) + p * (20 ±0)`
		//  Estimated: `7321 + m * (3006 ±2) + p * (42 ±0)`
		// Minimum execution time: 24_211_000 picoseconds.
		Weight::from_parts(7_859_569, 7321)
			// Standard Error: 31_278
			.saturating_add(Weight::from_parts(4_421_066, 0).saturating_mul(m.into()))
			// Standard Error: 2_388
			.saturating_add(Weight::from_parts(69_998, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(p.into()))
	}
	/// Storage: SubstrateBridgeOutboundChannel Interval (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel Interval (max_values: Some(1), max_size: None, mode: Measured)
	fn on_initialize_non_interval() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `65`
		//  Estimated: `560`
		// Minimum execution time: 2_340_000 picoseconds.
		Weight::from_parts(2_400_000, 560)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: SubstrateBridgeOutboundChannel Interval (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel Interval (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	fn on_initialize_no_messages() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `31`
		//  Estimated: `3032`
		// Minimum execution time: 4_850_000 picoseconds.
		Weight::from_parts(5_030_000, 3032)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	fn submit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `31`
		//  Estimated: `5012`
		// Minimum execution time: 7_380_000 picoseconds.
		Weight::from_parts(7_460_000, 5012)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: SubstrateBridgeOutboundChannel Interval (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel Interval (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:2 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	/// Storage: BridgeProxy Senders (r:20 w:0)
	/// Proof Skipped: BridgeProxy Senders (max_values: None, max_size: None, mode: Measured)
	/// Storage: LeafProvider LatestDigest (r:1 w:1)
	/// Proof Skipped: LeafProvider LatestDigest (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[1, 20]`.
	/// The range of component `p` is `[0, 256]`.
	fn on_initialize(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (259 ±0) + p * (20 ±0)`
		//  Estimated: `7321 + m * (3006 ±2) + p * (42 ±0)`
		// Minimum execution time: 24_211_000 picoseconds.
		Weight::from_parts(7_859_569, 7321)
			// Standard Error: 31_278
			.saturating_add(Weight::from_parts(4_421_066, 0).saturating_mul(m.into()))
			// Standard Error: 2_388
			.saturating_add(Weight::from_parts(69_998, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(p.into()))
	}
	/// Storage: SubstrateBridgeOutboundChannel Interval (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel Interval (max_values: Some(1), max_size: None, mode: Measured)
	fn on_initialize_non_interval() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `65`
		//  Estimated: `560`
		// Minimum execution time: 2_340_000 picoseconds.
		Weight::from_parts(2_400_000, 560)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: SubstrateBridgeOutboundChannel Interval (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel Interval (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	fn on_initialize_no_messages() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `31`
		//  Estimated: `3032`
		// Minimum execution time: 4_850_000 picoseconds.
		Weight::from_parts(5_030_000, 3032)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	fn submit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `31`
		//  Estimated: `5012`
		// Minimum execution time: 7_380_000 picoseconds.
		Weight::from_parts(7_460_000, 5012)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
