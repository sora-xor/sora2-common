// This file is part of the SORA network and Polkaswap app.

// Copyright (c) 2020, 2021, Polka Biome Ltd. All rights reserved.
// SPDX-License-Identifier: BSD-4-Clause

// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:

// Redistributions of source code must retain the above copyright notice, this list
// of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this
// list of conditions and the following disclaimer in the documentation and/or other
// materials provided with the distribution.
//
// All advertising materials mentioning features or use of this software must display
// the following acknowledgement: This product includes software developed by Polka Biome
// Ltd., SORA, and Polkaswap.
//
// Neither the name of the Polka Biome Ltd. nor the names of its contributors may be used
// to endorse or promote products derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY Polka Biome Ltd. AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Polka Biome Ltd. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//! Autogenerated weights for bridge_data_signer
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `TRX40`, CPU: `AMD Ryzen Threadripper 3960X 24-Core Processor`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// ./target/release/framenode
// benchmark
// pallet
// --chain=local
// --steps=50
// --repeat=20
// --pallet=bridge_data_signer
// --extrinsic=*
// --header=./misc/file_header.txt
// --template=./misc/pallet-weight-template.hbs
// --output=./bridge-data-signer.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for bridge_data_signer.
pub trait WeightInfo {
	fn register_network() -> Weight;
	fn add_peer() -> Weight;
	fn remove_peer() -> Weight;
	fn finish_add_peer() -> Weight;
	fn finish_remove_peer() -> Weight;
	fn approve() -> Weight;
}

/// Weights for bridge_data_signer using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: BridgeDataSigner Peers (r:1 w:1)
	/// Proof: BridgeDataSigner Peers (max_values: None, max_size: Some(1684), added: 4159, mode: MaxEncodedLen)
	fn register_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `4159`
		// Minimum execution time: 15_661_000 picoseconds.
		Weight::from_parts(18_111_000, 4159)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: BridgeDataSigner PendingPeerUpdate (r:1 w:1)
	/// Proof: BridgeDataSigner PendingPeerUpdate (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// Storage: BridgeDataSigner Peers (r:1 w:1)
	/// Proof: BridgeDataSigner Peers (max_values: None, max_size: Some(1684), added: 4159, mode: MaxEncodedLen)
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	fn add_peer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `367`
		//  Estimated: `12352`
		// Minimum execution time: 16_741_000 picoseconds.
		Weight::from_parts(17_451_000, 12352)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: BridgeDataSigner PendingPeerUpdate (r:1 w:1)
	/// Proof: BridgeDataSigner PendingPeerUpdate (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	fn remove_peer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `7987`
		// Minimum execution time: 14_101_000 picoseconds.
		Weight::from_parts(14_631_000, 7987)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: BridgeDataSigner PendingPeerUpdate (r:1 w:1)
	/// Proof: BridgeDataSigner PendingPeerUpdate (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	fn finish_add_peer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `239`
		//  Estimated: `2509`
		// Minimum execution time: 6_160_000 picoseconds.
		Weight::from_parts(6_310_000, 2509)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: BridgeDataSigner PendingPeerUpdate (r:1 w:1)
	/// Proof: BridgeDataSigner PendingPeerUpdate (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// Storage: BridgeDataSigner Peers (r:1 w:1)
	/// Proof: BridgeDataSigner Peers (max_values: None, max_size: Some(1684), added: 4159, mode: MaxEncodedLen)
	fn finish_remove_peer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `362`
		//  Estimated: `6668`
		// Minimum execution time: 8_700_000 picoseconds.
		Weight::from_parts(9_131_000, 6668)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: BridgeDataSigner Peers (r:1 w:0)
	/// Proof: BridgeDataSigner Peers (max_values: None, max_size: Some(1684), added: 4159, mode: MaxEncodedLen)
	/// Storage: BridgeDataSigner Approvals (r:1 w:1)
	/// Proof: BridgeDataSigner Approvals (max_values: None, max_size: Some(4966), added: 7441, mode: MaxEncodedLen)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `336`
		//  Estimated: `11600`
		// Minimum execution time: 50_042_000 picoseconds.
		Weight::from_parts(51_072_000, 11600)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: BridgeDataSigner Peers (r:1 w:1)
	/// Proof: BridgeDataSigner Peers (max_values: None, max_size: Some(1684), added: 4159, mode: MaxEncodedLen)
	fn register_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `4159`
		// Minimum execution time: 15_661_000 picoseconds.
		Weight::from_parts(18_111_000, 4159)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: BridgeDataSigner PendingPeerUpdate (r:1 w:1)
	/// Proof: BridgeDataSigner PendingPeerUpdate (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// Storage: BridgeDataSigner Peers (r:1 w:1)
	/// Proof: BridgeDataSigner Peers (max_values: None, max_size: Some(1684), added: 4159, mode: MaxEncodedLen)
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	fn add_peer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `367`
		//  Estimated: `12352`
		// Minimum execution time: 16_741_000 picoseconds.
		Weight::from_parts(17_451_000, 12352)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: BridgeDataSigner PendingPeerUpdate (r:1 w:1)
	/// Proof: BridgeDataSigner PendingPeerUpdate (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	fn remove_peer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `7987`
		// Minimum execution time: 14_101_000 picoseconds.
		Weight::from_parts(14_631_000, 7987)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: BridgeDataSigner PendingPeerUpdate (r:1 w:1)
	/// Proof: BridgeDataSigner PendingPeerUpdate (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	fn finish_add_peer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `239`
		//  Estimated: `2509`
		// Minimum execution time: 6_160_000 picoseconds.
		Weight::from_parts(6_310_000, 2509)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: BridgeDataSigner PendingPeerUpdate (r:1 w:1)
	/// Proof: BridgeDataSigner PendingPeerUpdate (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// Storage: BridgeDataSigner Peers (r:1 w:1)
	/// Proof: BridgeDataSigner Peers (max_values: None, max_size: Some(1684), added: 4159, mode: MaxEncodedLen)
	fn finish_remove_peer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `362`
		//  Estimated: `6668`
		// Minimum execution time: 8_700_000 picoseconds.
		Weight::from_parts(9_131_000, 6668)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: BridgeDataSigner Peers (r:1 w:0)
	/// Proof: BridgeDataSigner Peers (max_values: None, max_size: Some(1684), added: 4159, mode: MaxEncodedLen)
	/// Storage: BridgeDataSigner Approvals (r:1 w:1)
	/// Proof: BridgeDataSigner Approvals (max_values: None, max_size: Some(4966), added: 7441, mode: MaxEncodedLen)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `336`
		//  Estimated: `11600`
		// Minimum execution time: 50_042_000 picoseconds.
		Weight::from_parts(51_072_000, 11600)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
